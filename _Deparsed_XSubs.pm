#
#
# DO NOT EDIT THIS FILE, IT'S AUTOGENERATED FROM XS MODULES AND WILL BE UPDATED AUTOMATICALLY
#
#
package B {
sub address;
sub amagic_generation;
sub begin_av;
sub cast_I32;
sub cchar;
sub check_av;
sub comppadlist;
sub cstring;
sub curstash;
sub defstash;
sub diehook;
sub dowarn;
sub end_av;
sub formfeed;
sub hash;
sub inc_gv;
sub init_av;
sub main_cv;
sub main_root;
sub main_start;
sub minus_c;
sub opnumber;
sub perlstring;
sub ppname;
sub save_BEGINs;
sub sub_generation;
sub sv_no;
sub sv_undef;
sub sv_yes;
sub svref_2object;
sub threadsv_names;
sub unitcheck_av;
sub walkoptree;
sub walkoptree_debug;
sub warnhook;
}
package B::AV {
sub ARRAY;
sub ARRAYelt;
sub FILL;
sub MAX;
}
package B::BINOP {
sub last;
}
package B::BM {
sub PREVIOUS;
sub RARE;
sub TABLE;
sub USEFUL;
}
package B::COP {
sub arybase;
sub cop_seq;
sub file;
sub filegv;
sub hints;
sub hints_hash;
sub io;
sub label;
sub line;
sub stash;
sub stashoff;
sub stashpv;
sub warnings;
}
package B::COW {
sub can_cow;
sub cowrefcnt;
sub cowrefcnt_max;
sub is_cow;
}
package B::CV {
sub CONST;
sub CvFLAGS;
sub DEPTH;
sub FILE;
sub GV;
sub HSCXT;
sub NAME_HEK;
sub OUTSIDE;
sub OUTSIDE_SEQ;
sub PADLIST;
sub ROOT;
sub START;
sub STASH;
sub XSUB;
sub XSUBANY;
sub const_sv;
}
package B::Deparse {
sub main_cv;
sub main_root;
sub main_start;
sub opnumber;
sub perlstring;
sub svref_2object;
}
package B::FM {
sub LINES;
}
package B::GV {
sub AV;
sub CV;
sub CVGEN;
sub EGV;
sub FILE;
sub FILEGV;
sub FORM;
sub GP;
sub GPFLAGS;
sub GvFLAGS;
sub GvREFCNT;
sub HV;
sub IO;
sub LINE;
sub NAME;
sub STASH;
sub SV;
sub isGV_with_GP;
sub is_empty;
}
package B::HE {
sub HASH;
sub SVKEY_force;
sub VAL;
}
package B::HV {
sub ARRAY;
sub FILL;
sub KEYS;
sub MAX;
sub NAME;
sub RITER;
}
package B::INVLIST {
sub array_len;
sub get_invlist_array;
sub is_offset;
sub prev_index;
}
package B::IO {
sub BOTTOM_GV;
sub BOTTOM_NAME;
sub FMT_GV;
sub FMT_NAME;
sub IoFLAGS;
sub IoTYPE;
sub IsSTD;
sub LINES;
sub LINES_LEFT;
sub PAGE;
sub PAGE_LEN;
sub TOP_GV;
sub TOP_NAME;
}
package B::IV {
sub IV;
sub IVX;
sub RV;
sub UVX;
sub needs64bits;
sub packiv;
}
package B::LISTOP {
sub children;
}
package B::LOGOP {
sub other;
}
package B::LOOP {
sub lastop;
sub nextop;
sub redoop;
}
package B::MAGIC {
sub FLAGS;
sub LENGTH;
sub MOREMAGIC;
sub OBJ;
sub PRIVATE;
sub PTR;
sub REGEX;
sub TYPE;
sub precomp;
}
package B::METHOP {
sub first;
sub meth_sv;
sub rclass;
}
package B::NV {
sub NV;
sub NVX;
}
package B::OP {
sub desc;
sub flags;
sub folded;
sub moresib;
sub name;
sub next;
sub oplist;
sub opt;
sub parent;
sub ppaddr;
sub private;
sub savefree;
sub sibling;
sub size;
sub slabbed;
sub spare;
sub static;
sub targ;
sub type;
}
package B::PADLIST {
sub ARRAY;
sub ARRAYelt;
sub MAX;
sub NAMES;
sub REFCNT;
sub id;
sub outid;
}
package B::PADNAME {
sub COP_SEQ_RANGE_HIGH;
sub COP_SEQ_RANGE_LOW;
sub FLAGS;
sub GEN;
sub IsUndef;
sub LEN;
sub OURSTASH;
sub PARENT_FAKELEX_FLAGS;
sub PARENT_PAD_INDEX;
sub PROTOCV;
sub PV;
sub PVX;
sub REFCNT;
sub SvSTASH;
sub TYPE;
}
package B::PADNAMELIST {
sub ARRAY;
sub ARRAYelt;
sub MAX;
sub REFCNT;
}
package B::PADOP {
sub gv;
sub padix;
sub sv;
}
package B::PMOP {
sub code_list;
sub pmflags;
sub pmoffset;
sub pmregexp;
sub pmreplroot;
sub pmreplstart;
sub pmstash;
sub pmstashpv;
sub precomp;
sub reflags;
}
package B::PV {
sub CUR;
sub LEN;
sub PV;
sub PVBM;
sub PVX;
sub RV;
sub as_string;
}
package B::PVLV {
sub TARG;
sub TARGLEN;
sub TARGOFF;
sub TYPE;
}
package B::PVMG {
sub MAGIC;
sub SvSTASH;
}
package B::PVOP {
sub pv;
}
package B::REGEXP {
sub REGEX;
sub compflags;
sub precomp;
sub qr_anoncv;
}
package B::RHE {
sub HASH;
}
package B::SV {
sub FLAGS;
sub IsBOOL;
sub MAGICAL;
sub POK;
sub REFCNT;
sub ROK;
sub SvTYPE;
sub TRUE;
sub TRUE_nomg;
sub object_2svref;
}
package B::SVOP {
sub gv;
sub sv;
}
package B::UNOP {
sub first;
}
package B::UNOP_AUX {
sub aux_list;
sub string;
}
package Carp {
sub _maybe_isa;
sub downgrade;
sub is_utf8;
}
package Clone {
sub clone($;$) ;
}
package Compress::Raw::Bunzip2 {
sub DESTROY;
sub DispStream;
sub bzinflate;
sub compressedBytes;
sub inflateCount;
sub new;
sub status;
sub total_in_lo32;
sub total_out_lo32;
sub uncompressedBytes;
}
package Compress::Raw::Bzip2 {
sub DESTROY;
sub DispStream;
sub bzclose;
sub bzdeflate;
sub bzflush;
sub bzlibversion;
sub compressedBytes;
sub constant;
sub new;
sub total_in_lo32;
sub total_out_lo32;
sub uncompressedBytes;
}
package Compress::Raw::Zlib {
sub ZLIBNG_VER_STATUS;
sub ZLIB_VERNUM;
sub _deflateInit;
sub _inflateInit;
sub _inflateScanInit;
sub adler32;
sub adler32_combine;
sub constant;
sub crc32;
sub crc32_combine;
sub is_zlib_native;
sub is_zlibng;
sub is_zlibng_compat;
sub is_zlibng_native;
sub zlibCompileFlags;
sub zlib_version;
sub zlibng_version;
}
package Compress::Raw::Zlib::deflateStream {
sub DESTROY;
sub DispStream;
sub _deflateParams;
sub adler32;
sub compressedBytes;
sub crc32;
sub deflate;
sub deflateReset;
sub deflateTune;
sub dict_adler;
sub flush;
sub get_Bufsize;
sub get_Level;
sub get_Strategy;
sub msg;
sub status;
sub total_in;
sub total_out;
sub uncompressedBytes;
}
package Compress::Raw::Zlib::inflateScanStream {
sub DESTROY;
sub DispStream;
sub _createDeflateStream;
sub adler32;
sub compressedBytes;
sub crc32;
sub getEndOffset;
sub getLastBlockOffset;
sub getLastBufferOffset;
sub inflateCount;
sub inflateReset;
sub resetLastBlockByte;
sub scan;
sub status;
sub uncompressedBytes;
}
package Compress::Raw::Zlib::inflateStream {
sub DESTROY;
sub DispStream;
sub adler32;
sub compressedBytes;
sub crc32;
sub dict_adler;
sub get_Bufsize;
sub inflate;
sub inflateCount;
sub inflateReset;
sub inflateSync;
sub msg;
sub set_Append;
sub status;
sub total_in;
sub total_out;
sub uncompressedBytes;
}
package Config {
sub AUTOLOAD;
}
package Cpanel::JSON::XS {
sub DESTROY;
sub _from_json($;$$) ;
sub _to_json($;$) ;
sub allow_barekey;
sub allow_bignum;
sub allow_blessed;
sub allow_dupkeys;
sub allow_nonref;
sub allow_singlequote;
sub allow_stringify;
sub allow_tags;
sub allow_unknown;
sub ascii;
sub binary;
sub canonical;
sub convert_blessed;
sub decode;
sub decode_json($;$$) ;
sub decode_prefix;
sub dupkeys_as_arrayref;
sub encode;
sub encode_json($;$) ;
sub escape_slash;
sub filter_json_object;
sub filter_json_single_key_object;
sub get_allow_barekey;
sub get_allow_bignum;
sub get_allow_blessed;
sub get_allow_dupkeys;
sub get_allow_nonref;
sub get_allow_singlequote;
sub get_allow_stringify;
sub get_allow_tags;
sub get_allow_unknown;
sub get_ascii;
sub get_binary;
sub get_canonical;
sub get_convert_blessed;
sub get_dupkeys_as_arrayref;
sub get_escape_slash;
sub get_indent;
sub get_indent_length;
sub get_latin1;
sub get_max_depth;
sub get_max_size;
sub get_relaxed;
sub get_require_types;
sub get_shrink;
sub get_space_after;
sub get_space_before;
sub get_stringify_infnan;
sub get_type_all_string;
sub get_unblessed_bool;
sub get_utf8;
sub incr_parse;
sub incr_reset;
sub incr_skip;
sub indent;
sub indent_length;
sub latin1;
sub max_depth;
sub max_size;
sub new;
sub pretty;
sub relaxed;
sub require_types;
sub shrink;
sub sort_by;
sub space_after;
sub space_before;
sub stringify_infnan;
sub type_all_string;
sub unblessed_bool;
sub utf8;
}
package Cwd {
sub CLONE;
sub abs_path;
sub fastcwd;
sub getcwd;
sub realpath;
}
package DB {
sub DB_profiler;
sub _CHECK;
sub _END;
sub _INIT;
sub _finish;
sub disable_profile;
sub enable_profile;
sub finish_profile;
sub init_profiler;
sub set_option;
}
package DB_File {
sub DELETE;
sub DESTROY;
sub DoTie_;
sub EXISTS;
sub FETCH;
sub FETCHSIZE;
sub FIRSTKEY;
sub NEXTKEY;
sub O_ALIAS() ;
sub O_DEFER() ;
sub O_DIRECT() ;
sub O_LARGEFILE() ;
sub O_NOINHERIT() ;
sub O_RANDOM() ;
sub O_RAW() ;
sub O_RSRC() ;
sub O_RSYNC() ;
sub O_SEQUENTIAL() ;
sub O_TEMPORARY() ;
sub POP;
sub PUSH;
sub SHIFT;
sub STORE;
sub UNSHIFT;
sub constant;
sub del;
sub fd;
sub filter_fetch_key;
sub filter_fetch_value;
sub filter_store_key;
sub filter_store_value;
sub get;
sub length;
sub pop;
sub push;
sub put;
sub seq;
sub shift;
sub sync;
sub unshift;
}
package Data::Dumper {
sub Dumpxs($;$$) ;
sub _vstring($) ;
}
package Devel::Cover {
sub abs_path;
sub getcwd;
sub main_cv;
sub main_root;
sub main_start;
sub ppname;
}
package Devel::Cover::Util {
sub abs_path;
}
package Devel::NYTProf::Data {
sub load_profile_data_from_file;
}
package Devel::NYTProf::Test {
sub example_xsub;
sub example_xsub_eval;
sub set_errno;
sub ticks_for_usleep;
}
package Devel::NYTProf::Util {
sub trace_level;
}
package Devel::Peek {
sub CvGV;
sub DeadCode;
sub Dump;
sub DumpArray;
sub DumpProg;
sub SvREFCNT(\[$@%&*]) ;
sub fill_mstats;
sub mstat;
sub mstats2hash($\%;$) ;
sub mstats_fillhash(\%;$) ;
sub runops_debug;
}
package Digest::MD5 {
sub DESTROY;
sub add;
sub addfile;
sub b64digest;
sub clone;
sub context;
sub digest;
sub hexdigest;
sub md5;
sub md5_base64;
sub md5_hex;
sub new;
sub reset;
}
package Digest::SHA {
sub DESTROY($) ;
sub _addfilebin($$) ;
sub _addfileuniv($$) ;
sub _getstate($) ;
sub _putstate($$) ;
sub add($;@) ;
sub algorithm($) ;
sub b64digest($) ;
sub clone($) ;
sub digest($) ;
sub getcwd;
sub hashsize($) ;
sub hexdigest($) ;
sub hmac_sha1(;@) ;
sub hmac_sha1_base64(;@) ;
sub hmac_sha1_hex(;@) ;
sub hmac_sha224(;@) ;
sub hmac_sha224_base64(;@) ;
sub hmac_sha224_hex(;@) ;
sub hmac_sha256(;@) ;
sub hmac_sha256_base64(;@) ;
sub hmac_sha256_hex(;@) ;
sub hmac_sha384(;@) ;
sub hmac_sha384_base64(;@) ;
sub hmac_sha384_hex(;@) ;
sub hmac_sha512(;@) ;
sub hmac_sha512224(;@) ;
sub hmac_sha512224_base64(;@) ;
sub hmac_sha512224_hex(;@) ;
sub hmac_sha512256(;@) ;
sub hmac_sha512256_base64(;@) ;
sub hmac_sha512256_hex(;@) ;
sub hmac_sha512_base64(;@) ;
sub hmac_sha512_hex(;@) ;
sub newSHA($$) ;
sub sha1(;@) ;
sub sha1_base64(;@) ;
sub sha1_hex(;@) ;
sub sha224(;@) ;
sub sha224_base64(;@) ;
sub sha224_hex(;@) ;
sub sha256(;@) ;
sub sha256_base64(;@) ;
sub sha256_hex(;@) ;
sub sha384(;@) ;
sub sha384_base64(;@) ;
sub sha384_hex(;@) ;
sub sha512(;@) ;
sub sha512224(;@) ;
sub sha512224_base64(;@) ;
sub sha512224_hex(;@) ;
sub sha512256(;@) ;
sub sha512256_base64(;@) ;
sub sha512256_hex(;@) ;
sub sha512_base64(;@) ;
sub sha512_hex(;@) ;
sub shainit($$) ;
sub sharewind($) ;
sub shawrite($$$) ;
}
package Digest::base {
sub add;
sub clone;
sub digest;
sub new;
}
package DynaLoader {
sub boot_DynaLoader;
sub dl_error;
sub dl_find_symbol;
sub dl_install_xsub;
sub dl_load_file;
sub dl_undef_symbols;
sub dl_unload_file;
}
package Encode {
sub _utf8_off($) ;
sub _utf8_on($) ;
sub bytes2str($$;$) ;
sub decode($$;$) ;
sub decode_utf8($;$) ;
sub encode($$;$) ;
sub encode_utf8($) ;
sub from_to($$$;$) ;
sub is_utf8($;$) ;
sub onBOOT() ;
sub str2bytes($$;$) ;
}
package Encode::Byte {
sub bytes2str($$;$) ;
sub decode($$;$) ;
sub decode_utf8($;$) ;
sub encode($$;$) ;
sub encode_utf8($) ;
sub str2bytes($$;$) ;
}
package Encode::CN {
sub bytes2str($$;$) ;
sub decode($$;$) ;
sub decode_utf8($;$) ;
sub encode($$;$) ;
sub encode_utf8($) ;
sub str2bytes($$;$) ;
}
package Encode::EBCDIC {
sub bytes2str($$;$) ;
sub decode($$;$) ;
sub decode_utf8($;$) ;
sub encode($$;$) ;
sub encode_utf8($) ;
sub str2bytes($$;$) ;
}
package Encode::JP {
sub bytes2str($$;$) ;
sub decode($$;$) ;
sub decode_utf8($;$) ;
sub encode($$;$) ;
sub encode_utf8($) ;
sub str2bytes($$;$) ;
}
package Encode::KR {
sub bytes2str($$;$) ;
sub decode($$;$) ;
sub decode_utf8($;$) ;
sub encode($$;$) ;
sub encode_utf8($) ;
sub str2bytes($$;$) ;
}
package Encode::Symbol {
sub bytes2str($$;$) ;
sub decode($$;$) ;
sub decode_utf8($;$) ;
sub encode($$;$) ;
sub encode_utf8($) ;
sub str2bytes($$;$) ;
}
package Encode::TW {
sub bytes2str($$;$) ;
sub decode($$;$) ;
sub decode_utf8($;$) ;
sub encode($$;$) ;
sub encode_utf8($) ;
sub str2bytes($$;$) ;
}
package Encode::Unicode {
sub decode;
sub encode;
}
package Encode::XS {
sub cat_decode;
sub decode;
sub encode;
sub mime_name;
sub name;
sub needs_lines;
sub perlio_ok;
sub renew;
sub renewed;
}
package Encode::utf8 {
sub decode;
sub encode;
}
package Fcntl {
sub AUTOLOAD;
sub DN_ACCESS() ;
sub DN_ATTRIB() ;
sub DN_CREATE() ;
sub DN_DELETE() ;
sub DN_MODIFY() ;
sub DN_MULTISHOT() ;
sub DN_RENAME() ;
sub FCREAT() ;
sub FDEFER() ;
sub FDSYNC() ;
sub FEXCL() ;
sub FLARGEFILE() ;
sub FRSYNC() ;
sub FSYNC() ;
sub FTRUNC() ;
sub F_ADD_SEALS() ;
sub F_ALLOCSP() ;
sub F_ALLOCSP64() ;
sub F_COMPAT() ;
sub F_DUP2FD() ;
sub F_EXLCK() ;
sub F_FREESP() ;
sub F_FREESP64() ;
sub F_FSYNC() ;
sub F_FSYNC64() ;
sub F_GETLK64() ;
sub F_GETPIPE_SZ() ;
sub F_GETSIG() ;
sub F_GET_SEALS() ;
sub F_NODNY() ;
sub F_NOTIFY() ;
sub F_POSIX() ;
sub F_RDACC() ;
sub F_RDDNY() ;
sub F_RWACC() ;
sub F_RWDNY() ;
sub F_SEAL_FUTURE_WRITE() ;
sub F_SEAL_GROW() ;
sub F_SEAL_SEAL() ;
sub F_SEAL_SHRINK() ;
sub F_SEAL_WRITE() ;
sub F_SETLK64() ;
sub F_SETLKW64() ;
sub F_SETPIPE_SZ() ;
sub F_SETSIG() ;
sub F_SHARE() ;
sub F_SHLCK() ;
sub F_UNSHARE() ;
sub F_WRACC() ;
sub F_WRDNY() ;
sub LOCK_MAND() ;
sub LOCK_READ() ;
sub LOCK_RW() ;
sub LOCK_WRITE() ;
sub O_ALIAS() ;
sub O_ALT_IO() ;
sub O_DEFER() ;
sub O_DIRECT() ;
sub O_IGNORE_CTTY() ;
sub O_LARGEFILE() ;
sub O_NOATIME() ;
sub O_NOINHERIT() ;
sub O_NOLINK() ;
sub O_NOSIGPIPE() ;
sub O_NOTRANS() ;
sub O_RANDOM() ;
sub O_RAW() ;
sub O_RSRC() ;
sub O_RSYNC() ;
sub O_SEQUENTIAL() ;
sub O_TEMPORARY() ;
sub O_TMPFILE() ;
sub O_TTY_INIT() ;
sub S_ENFMT() ;
sub S_IFMT;
sub S_IMODE;
sub S_ISBLK;
sub S_ISCHR;
sub S_ISDIR;
sub S_ISFIFO;
sub S_ISLNK;
sub S_ISREG;
sub S_ISSOCK;
sub S_ISWHT;
}
package File::DosGlob {
sub _callsite;
}
package File::Find {
sub is_tainted($) ;
}
package File::Glob {
sub AUTOLOAD;
sub GLOB_ERROR;
sub bsd_glob;
sub bsd_glob_override;
sub csh_glob;
}
package File::Path {
sub getcwd;
}
package File::Spec::Unix {
sub _fn_canonpath;
sub _fn_catdir;
sub _fn_catfile;
sub canonpath;
sub catdir;
sub catfile;
}
package Filter::Util::Call {
sub filter_del() ;
sub filter_read(;$) ;
sub real_import($$$) ;
sub unimport(;$@) ;
}
package GDBM_File {
sub AUTOLOAD;
sub DELETE;
sub DESTROY;
sub EXISTS;
sub FETCH;
sub FIRSTKEY;
sub GDBM_version;
sub NEXTKEY;
sub STORE;
sub TIEHASH;
sub UNTIE;
sub block_size;
sub cache_size;
sub centfree;
sub clear_error;
sub close;
sub coalesce;
sub convert;
sub count;
sub crash_tolerance_status;
sub dbname;
sub dump;
sub errno;
sub failure_atomic;
sub filter_fetch_key;
sub filter_fetch_value;
sub filter_store_key;
sub filter_store_value;
sub flags;
sub gdbm_check_syserr;
sub latest_snapshot;
sub load;
sub mmap;
sub mmapsize;
sub needs_recovery;
sub recover;
sub reorganize;
sub setopt;
sub strerror;
sub sync;
sub sync_mode;
sub syserrno;
}
package HTML::Entities {
sub UNICODE_SUPPORT() ;
sub _decode_entities;
sub _probably_utf8_chunk;
sub decode;
sub decode_entities;
}
package HTML::Parser {
sub _alloc_pstate;
sub attr_encoded;
sub backquote;
sub boolean_attribute_value;
sub case_sensitive;
sub closing_plaintext;
sub empty_element_tags;
sub eof;
sub handler;
sub ignore_elements;
sub ignore_tags;
sub marked_sections;
sub parse;
sub report_tags;
sub strict_comment;
sub strict_end;
sub strict_names;
sub unbroken_text;
sub utf8_mode;
sub xml_mode;
sub xml_pic;
}
package Hash::StoredIterator {
sub hash_get_iterator;
sub hash_init_iterator;
sub hash_set_iterator;
}
package Hash::Util {
sub _clear_placeholders(\%) ;
sub all_keys(\%\@\@) ;
sub bucket_array;
sub bucket_info;
sub bucket_ratio(\%) ;
sub hash_seed() ;
sub hash_traversal_mask;
sub hash_value($;$) ;
sub hidden_ref_keys;
sub hv_store(\%$$) ;
sub legal_ref_keys;
sub num_buckets(\%) ;
sub used_buckets(\%) ;
}
package Hash::Util::FieldHash {
sub CLONE;
sub _active_fields;
sub _fieldhash($$) ;
sub _test_uvar_get;
sub _test_uvar_same;
sub _test_uvar_set;
sub id($) ;
sub id_2obj($) ;
sub register($@) ;
}
package I18N::Langinfo {
sub AUTOLOAD;
sub langinfo(_) ;
}
package IO::File {
sub new_tmpfile;
}
package IO::Handle {
sub blocking($;$) ;
sub clearerr;
sub error;
sub flush;
sub getline;
sub getlines;
sub gets;
sub setbuf;
sub setvbuf;
sub sync;
sub ungetc;
sub untaint;
}
package IO::Poll {
sub _poll;
}
package IO::Seekable {
sub getpos;
sub setpos;
}
package IO::Socket {
sub sockatmark($) ;
}
package IPC::Msg::stat {
sub pack($) ;
sub unpack($$) ;
}
package IPC::Semaphore::stat {
sub pack($) ;
sub unpack($$) ;
}
package IPC::SharedMem::stat {
sub pack($) ;
sub unpack($$) ;
}
package IPC::SysV {
sub _constant($) ;
sub ftok($;$) ;
sub memread($$$$) ;
sub memwrite($$$$) ;
sub shmat($$$) ;
sub shmdt($) ;
}
package Internals {
sub SvREADONLY(\[$%@];$) ;
sub SvREFCNT(\[$%@];$) ;
sub V;
sub hv_clear_placeholders(\%) ;
sub stack_refcounted;
}
package JSON::MaybeXS {
sub decode_json($;$$) ;
sub encode_json($;$) ;
}
package JSON::XS {
sub CLONE;
sub DESTROY;
sub allow_blessed;
sub allow_nonref;
sub allow_tags;
sub allow_unknown;
sub ascii;
sub boolean_values;
sub canonical;
sub convert_blessed;
sub decode;
sub decode_json($) ;
sub decode_prefix;
sub encode;
sub encode_json($) ;
sub filter_json_object;
sub filter_json_single_key_object;
sub get_allow_blessed;
sub get_allow_nonref;
sub get_allow_tags;
sub get_allow_unknown;
sub get_ascii;
sub get_boolean_values;
sub get_canonical;
sub get_convert_blessed;
sub get_indent;
sub get_latin1;
sub get_max_depth;
sub get_max_size;
sub get_relaxed;
sub get_shrink;
sub get_space_after;
sub get_space_before;
sub get_utf8;
sub incr_parse;
sub incr_reset;
sub incr_skip;
sub indent;
sub latin1;
sub max_depth;
sub max_size;
sub new;
sub pretty;
sub relaxed;
sub shrink;
sub space_after;
sub space_before;
sub utf8;
}
package List::SomeUtils::PP {
sub max(@) ;
}
package List::SomeUtils::XS {
sub _array_iterator(;$) ;
sub _natatime_iterator() ;
sub after(&@) ;
sub after_incl(&@) ;
sub all(&@) ;
sub all_u(&@) ;
sub any(&@) ;
sub any_u(&@) ;
sub apply(&@) ;
sub before(&@) ;
sub before_incl(&@) ;
sub bsearch(&@) ;
sub bsearchidx(&@) ;
sub each_array(\@;\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@) ;
sub each_arrayref;
sub false(&@) ;
sub firstidx(&@) ;
sub firstres(&@) ;
sub firstval(&@) ;
sub indexes(&@) ;
sub insert_after(&$\@) ;
sub insert_after_string($$\@) ;
sub lastidx(&@) ;
sub lastres(&@) ;
sub lastval(&@) ;
sub mesh(\@\@;\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@) ;
sub minmax(@) ;
sub mode(@) ;
sub natatime($@) ;
sub none(&@) ;
sub none_u(&@) ;
sub notall(&@) ;
sub notall_u(&@) ;
sub one(&@) ;
sub one_u(&@) ;
sub onlyidx(&@) ;
sub onlyres(&@) ;
sub onlyval(&@) ;
sub pairwise(&\@\@) ;
sub part(&@) ;
sub singleton(@) ;
sub true(&@) ;
sub uniq(@) ;
}
package List::SomeUtils_ea {
sub DESTROY;
}
package List::SomeUtils_na {
sub DESTROY;
}
package List::Util {
sub all(&@) ;
sub any(&@) ;
sub first(&@) ;
sub head($@) ;
sub max(@) ;
sub maxstr(@) ;
sub mesh;
sub mesh_longest;
sub mesh_shortest;
sub min(@) ;
sub minstr(@) ;
sub none(&@) ;
sub notall(&@) ;
sub pairfirst(&@) ;
sub pairgrep(&@) ;
sub pairkeys(@) ;
sub pairmap(&@) ;
sub pairs(@) ;
sub pairvalues(@) ;
sub product(@) ;
sub reduce(&@) ;
sub reductions(&@) ;
sub sample($@) ;
sub shuffle(@) ;
sub sum(@) ;
sub sum0(@) ;
sub tail($@) ;
sub uniq(@) ;
sub uniqint(@) ;
sub uniqnum(@) ;
sub uniqstr(@) ;
sub unpairs(@) ;
sub zip;
sub zip_longest;
sub zip_shortest;
}
package MIME::Base64 {
sub decode($) ;
sub decode_base64($) ;
sub decoded_base64_length($) ;
sub encode($;$) ;
sub encode_base64($;$) ;
sub encoded_base64_length($;$) ;
}
package MIME::QuotedPrint {
sub decode_qp($) ;
sub encode_qp($;$$) ;
}
package Math::BigInt::FastCalc {
sub __strip_zeros;
sub _acmp;
sub _copy;
sub _dec;
sub _inc;
sub _is_even;
sub _is_odd;
sub _is_one;
sub _is_ten;
sub _is_two;
sub _is_zero;
sub _len;
sub _new;
sub _one;
sub _ten;
sub _two;
sub _zero;
}
package NDBM_File {
sub DELETE;
sub DESTROY;
sub EXISTS;
sub FETCH;
sub FIRSTKEY;
sub NEXTKEY;
sub STORE;
sub TIEHASH;
sub clearerr;
sub error;
sub filter_fetch_key;
sub filter_fetch_value;
sub filter_store_key;
sub filter_store_value;
}
package Opcode {
sub _safe_call_sv($$$) ;
sub _safe_pkg_prep($) ;
sub define_optag($$) ;
sub deny($;@) ;
sub deny_only($;@) ;
sub empty_opset() ;
sub full_opset() ;
sub invert_opset($) ;
sub opcodes() ;
sub opdesc(;@) ;
sub opmask() ;
sub opmask_add($) ;
sub opset(;@) ;
sub opset_to_ops($;$) ;
sub permit($;@) ;
sub permit_only($;@) ;
sub verify_opset($;$) ;
}
package POSIX {
sub EOTHER() ;
sub ERESTART() ;
sub FLT_ROUNDS() ;
sub LC_ADDRESS() ;
sub LC_IDENTIFICATION() ;
sub LC_MEASUREMENT() ;
sub LC_NAME() ;
sub LC_PAPER() ;
sub LC_TELEPHONE() ;
sub L_cuserid() ;
sub L_tmpnam;
sub SIGPOLL() ;
sub SIGRTMAX() ;
sub SIGRTMIN() ;
sub STREAM_MAX() ;
sub S_ISBLK;
sub S_ISCHR;
sub S_ISDIR;
sub S_ISFIFO;
sub S_ISLNK;
sub S_ISREG;
sub S_ISSOCK;
sub TZNAME_MAX() ;
sub WEXITSTATUS;
sub WIFEXITED;
sub WIFSIGNALED;
sub WIFSTOPPED;
sub WSTOPSIG;
sub WTERMSIG;
sub _exit;
sub abort;
sub abs;
sub access;
sub acos;
sub acosh;
sub alarm;
sub asctime;
sub asin;
sub asinh;
sub assert;
sub atan2;
sub atan;
sub atanh;
sub atexit;
sub atof;
sub atoi;
sub atol;
sub bsearch;
sub calloc;
sub cbrt;
sub ceil;
sub chdir;
sub chmod;
sub chown;
sub clearerr;
sub clock;
sub close;
sub closedir;
sub constant;
sub copysign;
sub cos;
sub cosh;
sub creat;
sub ctermid;
sub ctime;
sub cuserid;
sub difftime;
sub div;
sub dup2;
sub dup;
sub erf;
sub erfc;
sub errno;
sub execl;
sub execle;
sub execlp;
sub execv;
sub execve;
sub execvp;
sub exit;
sub exp2;
sub exp;
sub expm1;
sub fabs;
sub fclose;
sub fcntl;
sub fdim;
sub fdopen;
sub fegetround() ;
sub feof;
sub ferror;
sub fesetround;
sub fflush;
sub fgetc;
sub fgetpos;
sub fgets;
sub fileno;
sub floor;
sub fma;
sub fmax;
sub fmin;
sub fmod;
sub fopen;
sub fork;
sub fpathconf;
sub fpclassify;
sub fprintf;
sub fputc;
sub fputs;
sub fread;
sub free;
sub freopen;
sub frexp;
sub fscanf;
sub fseek;
sub fsetpos;
sub fstat;
sub fsync;
sub ftell;
sub fwrite;
sub getc;
sub getchar;
sub getcwd;
sub getegid;
sub getenv;
sub geteuid;
sub getgid;
sub getgrgid;
sub getgrnam;
sub getgroups;
sub getlogin;
sub getpayload;
sub getpgrp;
sub getpid;
sub getppid;
sub getpwnam;
sub getpwuid;
sub gets;
sub getuid;
sub gmtime;
sub hypot;
sub ilogb;
sub isatty;
sub isfinite;
sub isgreater;
sub isgreaterequal;
sub isinf;
sub isless;
sub islessequal;
sub islessgreater;
sub isnan;
sub isnormal;
sub issignaling;
sub isunordered;
sub j0;
sub j1;
sub jn;
sub kill;
sub labs;
sub lchown;
sub ldexp;
sub ldiv;
sub lgamma;
sub link;
sub localeconv;
sub localtime;
sub log10;
sub log1p;
sub log2;
sub log;
sub logb;
sub longjmp;
sub lrint;
sub lround;
sub lseek;
sub malloc;
sub mblen;
sub mbtowc;
sub memchr;
sub memcmp;
sub memcpy;
sub memmove;
sub memset;
sub mkdir;
sub mkfifo;
sub mktime;
sub modf;
sub nan;
sub nearbyint;
sub nextafter;
sub nexttoward;
sub nice;
sub offsetof;
sub open;
sub opendir;
sub pathconf;
sub pause;
sub pipe;
sub pow;
sub putc;
sub putchar;
sub puts;
sub qsort;
sub raise;
sub rand;
sub read;
sub readdir;
sub realloc;
sub remainder;
sub remove;
sub remquo;
sub rename;
sub rewind;
sub rewinddir;
sub rint;
sub rmdir;
sub round;
sub scalbn;
sub scanf;
sub setbuf;
sub setgid;
sub setjmp;
sub setlocale;
sub setpayload;
sub setpayloadsig;
sub setpgid;
sub setsid;
sub setuid;
sub setvbuf;
sub sigaction;
sub siglongjmp;
sub signbit;
sub sigpending;
sub sigprocmask;
sub sigsetjmp;
sub sigsuspend;
sub sin;
sub sinh;
sub sleep;
sub sqrt;
sub srand;
sub sscanf;
sub stat;
sub strcat;
sub strchr;
sub strcmp;
sub strcoll;
sub strcpy;
sub strcspn;
sub strerror;
sub strftime;
sub strlen;
sub strncat;
sub strncmp;
sub strncpy;
sub strpbrk;
sub strrchr;
sub strspn;
sub strstr;
sub strtod;
sub strtok;
sub strtol;
sub strtold;
sub strtoul;
sub strxfrm;
sub sysconf;
sub system;
sub tan;
sub tanh;
sub tcdrain;
sub tcflow;
sub tcflush;
sub tcgetpgrp;
sub tcsendbreak;
sub tcsetpgrp;
sub tgamma;
sub time;
sub times;
sub tmpfile;
sub tmpnam;
sub trunc;
sub ttyname;
sub tzname;
sub tzset;
sub umask;
sub uname;
sub ungetc;
sub unlink;
sub utime;
sub vfprintf;
sub vprintf;
sub vsprintf;
sub wait;
sub waitpid;
sub wctomb;
sub write;
sub y0;
sub y1;
sub yn;
}
package POSIX::SigSet {
sub addset;
sub delset;
sub emptyset;
sub fillset;
sub ismember;
sub new;
}
package POSIX::Termios {
sub getattr;
sub getcc;
sub getcflag;
sub getiflag;
sub getispeed;
sub getlflag;
sub getoflag;
sub getospeed;
sub new;
sub setattr;
sub setcc;
sub setcflag;
sub setiflag;
sub setispeed;
sub setlflag;
sub setoflag;
sub setospeed;
}
package PadWalker {
sub _upcontext;
sub closed_over;
sub peek_my;
sub peek_our;
sub peek_sub;
sub set_closed_over;
sub var_name;
}
package Params::Util {
sub _ARRAY($) ;
sub _ARRAY0($) ;
sub _ARRAYLIKE($) ;
sub _CODE($) ;
sub _CODELIKE($) ;
sub _HASH($) ;
sub _HASH0($) ;
sub _HASHLIKE($) ;
sub _INSTANCE($$) ;
sub _NUMBER($) ;
sub _REGEX($) ;
sub _SCALAR($) ;
sub _SCALAR0($) ;
sub _STRING($) ;
sub _XScompiled;
}
package Params::Util::PP {
sub looks_like_number($) ;
}
package PerlIO {
sub get_layers(*;@) ;
}
package PerlIO::Layer {
sub NoWarnings;
sub find;
}
package Regexp {
sub DESTROY() ;
}
package SDBM_File {
sub DELETE;
sub DESTROY;
sub EXISTS;
sub FETCH;
sub FIRSTKEY;
sub NEXTKEY;
sub STORE;
sub TIEHASH;
sub error;
sub filter_fetch_key;
sub filter_fetch_value;
sub filter_store_key;
sub filter_store_value;
sub sdbm_clearerr;
}
package Scalar::Util {
sub blessed($) ;
sub dualvar($$) ;
sub isdual($) ;
sub isvstring($) ;
sub isweak($) ;
sub looks_like_number($) ;
sub openhandle($) ;
sub readonly($) ;
sub refaddr($) ;
sub reftype($) ;
sub tainted($) ;
sub unweaken($) ;
sub weaken($) ;
}
package Socket {
sub AF_802() ;
sub AF_AAL() ;
sub AF_CTF() ;
sub AF_GOSIP() ;
sub AF_KEY() ;
sub AF_LAST() ;
sub AF_NBS() ;
sub AF_NIT() ;
sub AF_OSINET() ;
sub AF_USER() ;
sub AF_WAN() ;
sub AF_X25() ;
sub AI_CANONIDN() ;
sub AI_IDN() ;
sub AUTOLOAD;
sub IPTOS_LOWDELAY() ;
sub IPTOS_MINCOST() ;
sub IPTOS_RELIABILITY() ;
sub IPTOS_THROUGHPUT() ;
sub IPV6_ADDRFROM() ;
sub IPV6_ADD_MEMBERSHIP() ;
sub IPV6_DROP_MEMBERSHIP() ;
sub IPV6_MTU() ;
sub IPV6_MTU_DISCOVER() ;
sub IPV6_RECVERR() ;
sub IPV6_ROUTER_ALERT() ;
sub IP_BIND_ADDRESS_NO_PORT() ;
sub IP_FREEBIND() ;
sub IP_MTU() ;
sub IP_MTU_DISCOVER() ;
sub IP_MULTICAST_ALL() ;
sub IP_NODEFRAG() ;
sub IP_PMTUDISC_DO() ;
sub IP_PMTUDISC_DONT() ;
sub IP_PMTUDISC_PROBE() ;
sub IP_PMTUDISC_WANT() ;
sub IP_RECVERR() ;
sub IP_TRANSPARENT() ;
sub LOCAL_CONNWAIT() ;
sub LOCAL_CREDS() ;
sub LOCAL_OCREDS() ;
sub LOCAL_PEEREID() ;
sub MSG_BCAST() ;
sub MSG_BTAG() ;
sub MSG_CTLFLAGS() ;
sub MSG_CTLIGNORE() ;
sub MSG_ERRQUEUE() ;
sub MSG_ETAG() ;
sub MSG_FASTOPEN() ;
sub MSG_FIN() ;
sub MSG_MAXIOVLEN() ;
sub MSG_MCAST() ;
sub MSG_PROXY() ;
sub MSG_RST() ;
sub MSG_SYN() ;
sub MSG_URG() ;
sub MSG_WIRE() ;
sub NI_IDN() ;
sub PF_802() ;
sub PF_AAL() ;
sub PF_CTF() ;
sub PF_GOSIP() ;
sub PF_LAST() ;
sub PF_NBS() ;
sub PF_NIT() ;
sub PF_OSINET() ;
sub PF_USER() ;
sub PF_WAN() ;
sub PF_X25() ;
sub SCM_CONNECT() ;
sub SCM_CREDENTIALS() ;
sub SOCK_CLOEXEC() ;
sub SOCK_NONBLOCK() ;
sub SO_ATTACH_FILTER() ;
sub SO_BACKLOG() ;
sub SO_BINDTODEVICE() ;
sub SO_BSDCOMPAT() ;
sub SO_BUSY_POLL() ;
sub SO_CHAMELEON() ;
sub SO_DETACH_FILTER() ;
sub SO_DGRAM_ERRIND() ;
sub SO_DOMAIN() ;
sub SO_DONTLINGER() ;
sub SO_FAMILY() ;
sub SO_INCOMING_CPU() ;
sub SO_INCOMING_NAPI_ID() ;
sub SO_LOCK_FILTER() ;
sub SO_MARK() ;
sub SO_PASSCRED() ;
sub SO_PASSIFNAME() ;
sub SO_PEEK_OFF() ;
sub SO_PEERCRED() ;
sub SO_PRIORITY() ;
sub SO_PROTOCOL() ;
sub SO_PROTOTYPE() ;
sub SO_RCVBUFFORCE() ;
sub SO_RXQ_OVFL() ;
sub SO_SECURITY_AUTHENTICATION() ;
sub SO_SECURITY_ENCRYPTION_NETWORK() ;
sub SO_SECURITY_ENCRYPTION_TRANSPORT() ;
sub SO_SNDBUFFORCE() ;
sub SO_STATE() ;
sub SO_XOPEN() ;
sub SO_XSE() ;
sub TCP_CC_INFO() ;
sub TCP_CONGESTION() ;
sub TCP_CORK() ;
sub TCP_DEFER_ACCEPT() ;
sub TCP_FASTOPEN_CONNECT() ;
sub TCP_FASTOPEN_KEY() ;
sub TCP_FASTOPEN_NO_COOKIE() ;
sub TCP_INFO() ;
sub TCP_INIT_CWND() ;
sub TCP_KEEPIDLE() ;
sub TCP_LINGER2() ;
sub TCP_MAXRT() ;
sub TCP_MD5SIG() ;
sub TCP_MD5SIG_EXT() ;
sub TCP_QUICKACK() ;
sub TCP_SACK_ENABLE() ;
sub TCP_STDURG() ;
sub TCP_SYNCNT() ;
sub TCP_TIMESTAMP() ;
sub TCP_TX_DELAY() ;
sub TCP_USER_TIMEOUT() ;
sub TCP_WINDOW_CLAMP() ;
sub UIO_MAXIOV() ;
sub getaddrinfo;
sub getnameinfo;
sub inet_aton;
sub inet_ntoa;
sub inet_ntop;
sub inet_pton;
sub pack_ip_mreq;
sub pack_ip_mreq_source;
sub pack_ipv6_mreq;
sub pack_sockaddr_in6;
sub pack_sockaddr_in;
sub pack_sockaddr_un;
sub sockaddr_family;
sub unpack_ip_mreq;
sub unpack_ip_mreq_source;
sub unpack_ipv6_mreq;
sub unpack_sockaddr_in6;
sub unpack_sockaddr_in;
sub unpack_sockaddr_un;
}
package Storable {
sub dclone($) ;
sub init_perinterp() ;
sub is_retrieving() ;
sub is_storing() ;
sub last_op_in_netorder() ;
sub mretrieve($;$) ;
sub mstore($) ;
sub net_mstore($) ;
sub net_pstore($$) ;
sub pretrieve($;$) ;
sub pstore($$) ;
sub stack_depth() ;
sub stack_depth_hash() ;
}
package Sub::Name {
sub subname;
}
package Sub::Util {
sub set_prototype;
sub set_subname;
sub subname;
}
package Sys::Hostname {
sub ghname;
}
package Sys::Syslog {
sub AF_802() ;
sub AF_AAL() ;
sub AF_CTF() ;
sub AF_GOSIP() ;
sub AF_KEY() ;
sub AF_LAST() ;
sub AF_NBS() ;
sub AF_NIT() ;
sub AF_OSINET() ;
sub AF_USER() ;
sub AF_WAN() ;
sub AF_X25() ;
sub AI_CANONIDN() ;
sub AI_IDN() ;
sub IPTOS_LOWDELAY() ;
sub IPTOS_MINCOST() ;
sub IPTOS_RELIABILITY() ;
sub IPTOS_THROUGHPUT() ;
sub IPV6_ADDRFROM() ;
sub IPV6_ADD_MEMBERSHIP() ;
sub IPV6_DROP_MEMBERSHIP() ;
sub IPV6_MTU() ;
sub IPV6_MTU_DISCOVER() ;
sub IPV6_RECVERR() ;
sub IPV6_ROUTER_ALERT() ;
sub IP_BIND_ADDRESS_NO_PORT() ;
sub IP_FREEBIND() ;
sub IP_MTU() ;
sub IP_MTU_DISCOVER() ;
sub IP_MULTICAST_ALL() ;
sub IP_NODEFRAG() ;
sub IP_PMTUDISC_DO() ;
sub IP_PMTUDISC_DONT() ;
sub IP_PMTUDISC_PROBE() ;
sub IP_PMTUDISC_WANT() ;
sub IP_RECVERR() ;
sub IP_TRANSPARENT() ;
sub LOG_FAC;
sub LOG_MAKEPRI;
sub LOG_MASK;
sub LOG_PRI;
sub LOG_UPTO;
sub MSG_BCAST() ;
sub MSG_BTAG() ;
sub MSG_CTLFLAGS() ;
sub MSG_CTLIGNORE() ;
sub MSG_ERRQUEUE() ;
sub MSG_ETAG() ;
sub MSG_FASTOPEN() ;
sub MSG_FIN() ;
sub MSG_MAXIOVLEN() ;
sub MSG_MCAST() ;
sub MSG_PROXY() ;
sub MSG_RST() ;
sub MSG_SYN() ;
sub MSG_URG() ;
sub MSG_WIRE() ;
sub NI_IDN() ;
sub PF_802() ;
sub PF_AAL() ;
sub PF_CTF() ;
sub PF_GOSIP() ;
sub PF_LAST() ;
sub PF_NBS() ;
sub PF_NIT() ;
sub PF_OSINET() ;
sub PF_USER() ;
sub PF_WAN() ;
sub PF_X25() ;
sub SCM_CONNECT() ;
sub SCM_CREDENTIALS() ;
sub SOCK_CLOEXEC() ;
sub SOCK_NONBLOCK() ;
sub SO_ATTACH_FILTER() ;
sub SO_BACKLOG() ;
sub SO_CHAMELEON() ;
sub SO_DETACH_FILTER() ;
sub SO_DGRAM_ERRIND() ;
sub SO_DOMAIN() ;
sub SO_DONTLINGER() ;
sub SO_FAMILY() ;
sub SO_INCOMING_CPU() ;
sub SO_INCOMING_NAPI_ID() ;
sub SO_LOCK_FILTER() ;
sub SO_PASSCRED() ;
sub SO_PASSIFNAME() ;
sub SO_PEERCRED() ;
sub SO_PROTOCOL() ;
sub SO_PROTOTYPE() ;
sub SO_RCVBUFFORCE() ;
sub SO_SECURITY_AUTHENTICATION() ;
sub SO_SECURITY_ENCRYPTION_NETWORK() ;
sub SO_SECURITY_ENCRYPTION_TRANSPORT() ;
sub SO_SNDBUFFORCE() ;
sub SO_STATE() ;
sub SO_XOPEN() ;
sub SO_XSE() ;
sub TCP_CC_INFO() ;
sub TCP_CONGESTION() ;
sub TCP_CORK() ;
sub TCP_DEFER_ACCEPT() ;
sub TCP_FASTOPEN_CONNECT() ;
sub TCP_FASTOPEN_KEY() ;
sub TCP_FASTOPEN_NO_COOKIE() ;
sub TCP_INFO() ;
sub TCP_INIT_CWND() ;
sub TCP_KEEPIDLE() ;
sub TCP_LINGER2() ;
sub TCP_MAXRT() ;
sub TCP_MD5SIG() ;
sub TCP_MD5SIG_EXT() ;
sub TCP_QUICKACK() ;
sub TCP_SACK_ENABLE() ;
sub TCP_STDURG() ;
sub TCP_SYNCNT() ;
sub TCP_TIMESTAMP() ;
sub TCP_TX_DELAY() ;
sub TCP_USER_TIMEOUT() ;
sub TCP_WINDOW_CLAMP() ;
sub UIO_MAXIOV() ;
sub closelog_xs;
sub constant;
sub getaddrinfo;
sub getnameinfo;
sub inet_aton;
sub inet_ntoa;
sub inet_ntop;
sub inet_pton;
sub openlog_xs;
sub pack_ip_mreq;
sub pack_ip_mreq_source;
sub pack_ipv6_mreq;
sub pack_sockaddr_in6;
sub pack_sockaddr_in;
sub pack_sockaddr_un;
sub setlocale;
sub setlogmask_xs;
sub sockaddr_family;
sub strftime;
sub syslog_xs;
sub unpack_ip_mreq;
sub unpack_ip_mreq_source;
sub unpack_ipv6_mreq;
sub unpack_sockaddr_in6;
sub unpack_sockaddr_in;
sub unpack_sockaddr_un;
}
package Test2::API {
sub blessed($) ;
sub time() ;
sub weaken($) ;
}
package Test2::API::Context {
sub blessed($) ;
sub weaken($) ;
}
package Test2::API::Instance {
sub reftype($) ;
}
package Test2::Event {
sub blessed($) ;
sub reftype($) ;
}
package Test2::Event::V2 {
sub reftype($) ;
}
package Test2::EventFacet::Trace {
sub time() ;
}
package Test2::Hub {
sub first(&@) ;
sub weaken($) ;
}
package Test2::Util::Facets2Legacy {
sub blessed($) ;
}
package Test2::Util::HashBase {
sub _isa($;$) ;
}
package Test::Builder {
sub blessed($) ;
sub reftype($) ;
sub weaken($) ;
}
package Test::LeakTrace {
sub CLONE;
sub _finish;
sub _runops_installed;
sub _start;
sub count_sv;
}
package Tie::Hash::NamedCapture {
sub CLEAR;
sub DELETE;
sub EXISTS;
sub FETCH;
sub FIRSTKEY;
sub NEXTKEY;
sub SCALAR;
sub STORE;
sub TIEHASH;
sub _tie_it;
sub flags;
}
package Time::HiRes {
sub alarm($;$) ;
sub clock() ;
sub clock_getres(;$) ;
sub clock_gettime(;$) ;
sub clock_nanosleep($$;$) ;
sub constant($) ;
sub getitimer($) ;
sub gettimeofday() ;
sub lstat(;$) ;
sub nanosleep($) ;
sub setitimer($$;$) ;
sub sleep(;@) ;
sub stat(;$) ;
sub time() ;
sub ualarm($;$) ;
sub usleep($) ;
sub utime($$@) ;
}
package Time::Piece {
sub _crt_gmtime($) ;
sub _crt_localtime($) ;
sub _get_localization() ;
sub _mini_mktime($$$$$$) ;
sub _strftime($$;$) ;
sub _strptime($$$$) ;
sub _tzset() ;
sub blessed($) ;
}
package UNIVERSAL {
sub DOES;
sub VERSION;
sub can;
sub import;
sub isa;
sub unimport;
}
package Unicode::Collate {
sub _decompHangul;
sub _derivCE_14;
sub _derivCE_18;
sub _derivCE_20;
sub _derivCE_22;
sub _derivCE_24;
sub _derivCE_32;
sub _derivCE_34;
sub _derivCE_36;
sub _derivCE_38;
sub _derivCE_40;
sub _derivCE_43;
sub _derivCE_8;
sub _derivCE_9;
sub _exists_simple;
sub _fetch_rest;
sub _fetch_simple;
sub _getHexArray;
sub _ignorable_simple;
sub _isIllegal;
sub _isUIdeo;
sub _uideoCE_8;
sub getHST;
sub mk_SortKey;
sub varCE;
sub visualizeSortKey;
}
package Unicode::Normalize {
sub FCC($) ;
sub NFC($) ;
sub NFD($) ;
sub NFKC($) ;
sub NFKD($) ;
sub checkFCC($) ;
sub checkFCD($) ;
sub checkNFC($) ;
sub checkNFD($) ;
sub checkNFKC($) ;
sub checkNFKD($) ;
sub compose($) ;
sub composeContiguous($) ;
sub decompose($;$) ;
sub getCanon($) ;
sub getCombinClass($) ;
sub getCompat($) ;
sub getComposite($$) ;
sub isComp2nd($) ;
sub isComp_Ex($) ;
sub isExclusion($) ;
sub isNFC_MAYBE($) ;
sub isNFC_NO($) ;
sub isNFD_NO($) ;
sub isNFKC_MAYBE($) ;
sub isNFKC_NO($) ;
sub isNFKD_NO($) ;
sub isNonStDecomp($) ;
sub isSingleton($) ;
sub reorder($) ;
sub splitOnLastStarter;
}
package attributes {
sub _fetch_attrs($) ;
sub _guess_stash($) ;
sub _modify_attrs;
sub reftype($) ;
}
package builtin {
sub blessed($) ;
sub ceil($) ;
sub created_as_number($) ;
sub created_as_string($) ;
sub export_lexically;
sub false() ;
sub floor($) ;
sub import;
sub indexed(@) ;
sub inf() ;
sub is_bool($) ;
sub is_tainted($) ;
sub is_weak($) ;
sub load_module($) ;
sub nan() ;
sub refaddr($) ;
sub reftype($) ;
sub stringify($) ;
sub trim($) ;
sub true() ;
sub unweaken($) ;
sub weaken($) ;
}
package constant {
sub _make_const(\[$@]) ;
}
package mro {
sub _nextcan;
sub get_isarev($) ;
sub get_linear_isa($;$) ;
sub get_mro($) ;
sub get_pkg_gen($) ;
sub invalidate_all_method_caches() ;
sub is_universal($) ;
sub method_changed_in($) ;
sub set_mro($$) ;
}
package re {
sub install;
sub is_regexp($) ;
sub optimization($) ;
sub regexp_pattern($) ;
sub regmust($) ;
sub regname(;$$) ;
sub regnames(;$) ;
sub regnames_count() ;
}
package threads {
sub DESTROY;
sub equal;
sub join;
}
package threads::shared {
sub blessed($) ;
sub refaddr($) ;
sub reftype($) ;
}
package utf8 {
sub decode;
sub downgrade;
sub encode;
sub is_utf8;
sub native_to_unicode;
sub unicode_to_native;
sub upgrade;
sub valid;
}
package version {
sub _VERSION;
sub boolean;
sub declare;
sub is_alpha;
sub is_qv;
sub new;
sub noop;
sub normal;
sub numify;
sub parse;
sub qv;
sub stringify;
sub vcmp;
}
